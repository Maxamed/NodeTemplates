// Generated by CoffeeScript 1.3.1
var HTML, URL, original;

HTML = require("jsdom").dom.level3.html;

URL = require("url");

HTML.HTMLElement.prototype.__defineGetter__("offsetLeft", function() {
  return 0;
});

HTML.HTMLElement.prototype.__defineGetter__("offsetTop", function() {
  return 0;
});

HTML.HTMLElement.prototype.__defineGetter__("offsetWidth", function() {
  return 100;
});

HTML.HTMLElement.prototype.__defineGetter__("offsetHeight", function() {
  return 100;
});

original = HTML.Element.prototype.setAttribute;

HTML.Element.prototype.setAttribute = function(name, value) {
  var attr, wrapped;
  if (/^on.+/.test(name)) {
    wrapped = "if ((function() { " + value + " }).call(this,event) === false) event.preventDefault();";
    this[name] = function(event) {
      var window;
      window = this.run ? this : this._ownerDocument.parentWindow;
      try {
        window.event = event;
        return window.run(wrapped);
      } finally {
        window.event = null;
      }
    };
    if (this._ownerDocument) {
      attr = this._ownerDocument.createAttribute(name);
      attr.value = value;
      return this._attributes.setNamedItem(attr);
    }
  } else {
    return original.apply(this, arguments);
  }
};

HTML.HTMLAnchorElement.prototype._eventDefaults = {
  click: function(event) {
    var anchor, browser, window;
    anchor = event.target;
    if (!anchor.href) {
      return;
    }
    window = anchor.ownerDocument.parentWindow;
    browser = window.browser;
    switch (anchor.target || "_self") {
      case "_self":
        window = window;
        break;
      case "_parent":
        window = window.parent;
        break;
      case "_top":
        window = window.top;
        break;
      default:
        window = browser.windows.get(anchor.target) || browser.open({
          name: anchor.target
        });
    }
    browser.windows.select(window);
    return window.location = anchor.href;
  }
};

HTML.resourceLoader.load = function(element, href, callback) {
  var document, file, loaded, ownerImplementation, tagName, url, window;
  document = element.ownerDocument;
  window = document.parentWindow;
  ownerImplementation = document.implementation;
  tagName = element.tagName.toLowerCase();
  if (ownerImplementation.hasFeature('FetchExternalResources', tagName)) {
    switch (tagName) {
      case "iframe":
        if (/^javascript:/.test(href)) {
          return url = URL.parse(href);
        } else {
          window = element.contentWindow;
          url = this.resolve(window.parent.location, href);
          loaded = function(response, filename) {
            return callback(response.body, URL.parse(response.url).pathname);
          };
          return window.browser.resources.get(url, this.enqueue(element, loaded, url.pathname));
        }
        break;
      default:
        url = URL.parse(this.resolve(document, href));
        if (url.protocol === "file:") {
          loaded = function(data, filename) {
            return callback.call(this, data, filename);
          };
          file = "/" + url.hostname + url.pathname;
          return this.readFile(file, this.enqueue(element, loaded, file));
        } else {
          loaded = function(response, filename) {
            return callback.call(this, response.body, URL.parse(response.url).pathname);
          };
          return window.browser.resources.get(url, this.enqueue(element, loaded, url.pathname));
        }
    }
  }
};

HTML.Document.prototype._elementBuilders["iframe"] = function(doc, tag) {
  var iframe, parent, window;
  parent = doc.window;
  iframe = new HTML.HTMLIFrameElement(doc, tag);
  window = null;
  Object.defineProperty(iframe, "contentWindow", {
    get: function() {
      if (!window) {
        window = parent.browser.open({
          name: iframe.name,
          parent: parent
        });
      }
      return window;
    }
  });
  Object.defineProperty(iframe, "contentDocument", {
    get: function() {
      return window.document;
    }
  });
  iframe.setAttribute = function(name, value) {
    if (name === "src" && value) {
      iframe.contentWindow.location = URL.resolve(parent.location, value);
      return iframe.contentDocument.addEventListener("DOMContentLoaded", function(event) {
        var onload;
        onload = parent.document.createEvent("HTMLEvents");
        onload.initEvent("load", false, false);
        return parent.browser._eventloop.dispatch(iframe, onload);
      });
    } else {
      return HTML.HTMLFrameElement.prototype.setAttribute.call(this, name, value);
    }
  };
  return iframe;
};

Object.defineProperty(HTML.CSSStyleDeclaration.prototype, "opacity", {
  get: function() {
    return this._opacity || "";
  },
  set: function(opacity) {
    if (opacity) {
      opacity = parseFloat(opacity);
      if (!isNaN(opacity)) {
        return this._opacity = opacity.toString();
      }
    } else {
      return delete this._opacity;
    }
  }
});

HTML.Node.prototype.__defineGetter__("textContent", function() {
  if (this.nodeType === HTML.Node.TEXT_NODE || this.nodeType === HTML.Node.COMMENT_NODE || this.nodeType === HTML.Node.ATTRIBUTE_NODE || this.nodeType === HTML.Node.CDATA_SECTION_NODE) {
    return this.nodeValue;
  } else if (this.nodeType === HTML.Node.ELEMENT_NODE || this.nodeType === HTML.Node.DOCUMENT_FRAGMENT_NODE) {
    return this.childNodes.filter(function(node) {
      return node.nodeType === HTML.Node.TEXT_NODE || node.nodeType === HTML.Node.ELEMENT_NODE || node.nodeType === HTML.Node.CDATA_SECTION_NODE;
    }).map(function(node) {
      return node.textContent;
    }).join("");
  } else {
    return null;
  }
});

HTML.NodeList.prototype.update = function() {
  var i, name, node, nodes, _i, _j, _len, _ref, _ref1;
  if (this._element && this._version < this._element._version) {
    for (i = _i = 0, _ref = this._length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      delete this[i];
    }
    if (this._names) {
      _ref1 = this._names;
      for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
        name = _ref1[_j];
        delete this[name];
      }
    }
    nodes = this._snapshot = this._query();
    this._length = nodes.length;
    this._names = [];
    for (i in nodes) {
      node = nodes[i];
      this[i] = node;
      if (name = node.name) {
        this._names.push(name);
        this[node.name] = node;
      }
    }
    this._version = this._element._version;
  }
  return this._snapshot;
};
